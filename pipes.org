#+OPTIONS: title:t date:t author:t email:t
#+OPTIONS: toc:t h:6 num:nil |:t todo:nil
#+OPTIONS: *:t -:t ::t <:t \n:t e:t creator:nil
#+OPTIONS: f:t inline:t tasks:t tex:t timestamp:t
#+OPTIONS: html-preamble:t html-postamble:nil

#+PROPERTY: header-args:R :session R:purrr :eval no :exports code :tangle yes :comments link

#+TITLE:   Magrittr less used "piping" treasures
#+DATE:	  {{{time(%B %d\, %Y)}}}
#+AUTHOR:  Marie-Hélène Burle
#+CREATOR: Simon Fraser University, Research Commons
#+EMAIL:   msb2@sfu.ca

* Requirements

#+BEGIN_SRC R
library(magrittr)
#+END_SRC

* %>%

src_R[:eval no]{%>%}, or "forward-pipe operator", is the default R pipe. Several src_R[:eval no]{tidyverse} packages include it, which is why, even though src_R[:eval no]{magrittr} is not one of the core packages, you do not have to load src_R[:eval no]{magrittr} to use it in src_R[:eval no]{dplyr}, src_R[:eval no]{tidyr}, src_R[:eval no]{forcats}, src_R[:eval no]{rvest}, src_R[:eval no]{stringr}, src_R[:eval no]{purrr}, or src_R[:eval no]{modelr}.

src_R[:eval no]{%>%} represents an arrow going right and pipes the left expression to the right.

In R, the object on which a function is applied often is the first argument of that function.

For instance, to get the mean of an object src_R[:eval no]{x}, we apply the function src_R[:eval no]{mean()} on it this way:

#+BEGIN_SRC R
x <- 1:10
#+END_SRC

#+BEGIN_SRC R
mean(x)
#+END_SRC

#+BEGIN_SRC R
x %>% mean()
#+END_SRC


As for the pipes, of course, you don't have to use them. It is funny that you find it hard to wrap your head around it as it is supposed to be much more intuitive in that it uses the way we (humans) think.

I do that, THEN (with the output) I do this, THEN (with the new output) I do something else will be:

I do that %>%
I do this %>%
I do something else

It makes pipelines linear and very easy to read, one step at a time.

While the classic way of writing functions would look like:

I do something else(I do this(I do that))).

So, with your long-term habits, it might be puzzling. But for a beginner, it is a lot easier to get where you want one step at a time in a linear and human readable way.




In the [[https://prosoitos.github.io/r_resources/functional-programming_with-answers][functional programming]] section, we used some fake bird banding data created by this code:

#+BEGIN_SRC R
banding <-
  tibble(
    bird = paste0("bird", 1:50),
    sex = sample(c("F", "M"), 50, replace = T),
    population = sample(LETTERS[1:3], 50, replace = T),
    mass = rnorm(50, 43, 4) %>% round(1),
    tarsus = rnorm(50, 27, 1) %>% round(1),
    wing = rnorm(50, 112, 3) %>% round(0)
  ) %T>% 
  str()
#+END_SRC

* %<>% (compound assignment pipe-operator)

src_R[:eval no]{%<>%} pipes the left expression to the right, and then back to the left. Instead of an arrow going right (as the main pipe is), think of it as an arrow going from left to right and then back left.

#+BEGIN_RED
Basically, it replaces the variable to the left, after having been transformed by the expression to the right.

This is extremely convenient, but also dangerous: each time you run such line of code, your variable changes. To rerun the script, you need to first rerun the code that created the initial variable with that name.
#+END_RED

The code:

#+BEGIN_SRC R
banding %<>% modify_if(is.factor, as.character)
#+END_SRC

is equivalent to:

#+BEGIN_SRC R
banding <-
  banding %>%
  modify_if(is.factor, as.character)
#+END_SRC

* %T% (tee operator)

src_R[:eval no]{%T%} pipes the effect of the left expression to the right, but does not pipe the object itself (so the object is "free" to be used by another pipe). This is very useful when you want to produce to output from one object or produce a side effect (e.g. printing) without interrupting a pipeline. I like to think of the "T" as a branching which represents the 2 outputs produced by a single object.

#+BEGIN_VERBATIM
Try replacing src_R[:eval no]{%T%} with the regular pipe src_R[:eval no]{%>%} in our code at the top of this page.
What happens?
Can you explain it?
#+END_VERBATIM

#+BEGIN_RED
src_R[:eval no]{magrittr} has other pipes and [[https://github.com/tidyverse/magrittr][you should explore them at your own time]]!
#+END_RED

* %$% (exposition pipe-operator)

