#+OPTIONS: title:t date:t author:t email:t
#+OPTIONS: toc:t h:6 num:nil |:t todo:nil
#+OPTIONS: *:t -:t ::t <:t \n:t e:t creator:nil
#+OPTIONS: f:t inline:t tasks:t tex:t timestamp:t
#+OPTIONS: html-preamble:t html-postamble:t

#+PROPERTY: header-args:R :session R:purrr :eval no :exports code :tangle yes :comments link

#+TITLE:   Magrittr less used "piping" treasures
#+DATE:	  {{{time(%B %d\, %Y)}}}
#+AUTHOR:  Marie-Hélène Burle
#+EMAIL:   msb2@sfu.ca
#+CREATOR: <img src="./favicons/rc_no_bg.png" height="22" width="22"> SFU Research Commons

/Note: This page is still under construction./

* Requirements

#+BEGIN_SRC R
library(magrittr)
#+END_SRC

* %>% (forward-pipe operator)

src_R[:eval no]{%>%} is the default pipe in R, equivalent to the pipe represented by src_R[:eval no]{|} in other languages. Several src_R[:eval no]{tidyverse} packages (e.g. src_R[:eval no]{dplyr}, src_R[:eval no]{tidyr}, src_R[:eval no]{forcats}, src_R[:eval no]{rvest}, src_R[:eval no]{stringr}, src_R[:eval no]{purrr}, or src_R[:eval no]{modelr}) include it, which is why you do not have to load src_R[:eval no]{magrittr} to use it.

src_R[:eval no]{%>%} (an arrow pointing to the right) passes the left-hand side expression to the right-hand side one, allowing for the creating of pipelines, or chains of actions applied to an object. It also makes for more human readable code since you read it from left to right and from top to bottom.

For instance, "I do this, THEN (with the output) I do that, THEN (with the new output) I do something else" can be represented as:

#+BEGIN_example
I do this %>%
I do that %>%
I do something else
#+END_example

While the classic way of writing functions would look like:

#+BEGIN_example
I do something else(I do that(I do this))
#+END_example

You have to read such nested functions from the inside out and from the bottom right to the top left.

** Examples

For instance, to get the mean of an object src_R[:eval no]{x}, we apply the function src_R[:eval no]{mean()} on it this way:

#+BEGIN_SRC R
x <- 1:10

## classic way
mean(x)

## with the pipe
x %>% mean()
#+END_SRC

In such a situation, the advantages of the pipes are not obvious.

But now, consider this:

#+BEGIN_src R

#+END_src




* %<>% (compound assignment pipe-operator)

src_R[:eval no]{%<>%} pipes the left expression to the right, and then back to the left. Instead of an arrow going right (as the main pipe is), think of it as an arrow going from left to right and then back left.

#+BEGIN_red
Basically, it replaces the variable to the left, after having been transformed by the expression to the right.

This is extremely convenient, but also dangerous: each time you run such line of code, your variable changes. To rerun the script, you need to first rerun the code that created the initial variable with that name.
#+END_red

The code:

#+BEGIN_SRC R
banding %<>% modify_if(is.factor, as.character)
#+END_SRC

is equivalent to:

#+BEGIN_SRC R
banding <-
  banding %>%
  modify_if(is.factor, as.character)
#+END_SRC

* %T% (tee operator)

src_R[:eval no]{%T%} pipes the effect of the left expression to the right, but does not pipe the object itself (so the object is "free" to be used by another pipe). This is very useful when you want to produce to output from one object or produce a side effect (e.g. printing) without interrupting a pipeline. I like to think of the "T" as a branching which represents the 2 outputs produced by a single object.

In the [[https://prosoitos.github.io/r_resources/functional-programming_with-answers][functional programming]] section, we used some fake bird banding data created by this code:

#+BEGIN_SRC R
banding <-
  tibble(
    bird = paste0("bird", 1:50),
    sex = sample(c("F", "M"), 50, replace = T),
    population = sample(LETTERS[1:3], 50, replace = T),
    mass = rnorm(50, 43, 4) %>% round(1),
    tarsus = rnorm(50, 27, 1) %>% round(1),
    wing = rnorm(50, 112, 3) %>% round(0)
  ) %T>% 
  str()
#+END_SRC

#+BEGIN_vertbar
Try replacing src_R[:eval no]{%T%} with the forward pipe (src_R[:eval no]{%>%}) in this code and see what happens.
Can you explain it?
#+END_vertbar

* %$% (exposition pipe-operator)

